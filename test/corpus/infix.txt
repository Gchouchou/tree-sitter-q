===
simple infix
===
1+a
---

(program
  (progn
    (func_app
      (number)
      (builtin_infix_func)
      (variable
        (identifier)))))

===
simple infix minus no space
===
1-1
---

(program
  (progn
    (func_app
      (number)
      (builtin_infix_func)
      (number))))

===
period infix
===
1 . 1
---

(program
  (progn
    (func_app
      (number)
      (builtin_infix_func)
      (number))))

===
infix projection
===
(1 +)
---

(program
  (progn
    (parenthesis_exp
      (infix_projection
        (number)
        (builtin_infix_func)))))

===
infix projection with minus no space
===
a-
---

(program
  (progn
    (infix_projection
      (variable
        (identifier))
      (builtin_infix_func))))

===
infix projection with minus with space
===
a -
---

(program
  (progn
    (infix_projection
      (variable
        (identifier))
      (builtin_infix_func))))

===
infix projection with minus, a number with space
===
1 -
---

(program
  (progn
    (infix_projection
      (number)
      (builtin_infix_func))))

===
infix projection with minus, a number without space
===
1-
---

(program
  (progn
    (infix_projection
      (number)
      (builtin_infix_func))))

===
setenv builtin function
===
`a setenv "asdf"
---

(program
  (progn
    (func_app
      (symbol
        (regular_symbol))
      (builtin_infix_func)
      (string
        (string_fragment)))))

===
infix projection with each
===
f g'
---

(program
  (progn
    (infix_projection
      (variable
        (identifier))
      (infix_mod_func
        (variable
          (identifier))
        (infix_func_modifier)))))

===
Chaining function application without spacing
===
1#f[a]
---

(program
  (progn
    (func_app
      (number)
      (builtin_infix_func)
      (func_app
        (variable
          (identifier))
        (parameter_pass
          (variable
            (identifier)))))))

===
infix assign
===
a:
---

(program
  (progn
    (infix_projection
      (variable
        (identifier))
      (assignment_func))))

===
infix in parenthesis
===
(+)[a;b]
---

(program
  (progn
    (func_app
      (parenthesis_exp
        (builtin_infix_func))
      (parameter_pass
        (variable
          (identifier))
        (semicolon)
        (variable
          (identifier))))))

===
infix naked
===
setenv
---

(program
  (progn
    (builtin_infix_func)))

===
Assignment an operator
===
a:+
---

(program
  (progn
    (func_app
      (variable
        (identifier))
      (assignment_func)
      (builtin_infix_func))))

===
Implicit composition 1
===
0|+
---

(program
  (progn
    (implicit_composition
      (number)
      (builtin_infix_func)
      (builtin_infix_func))))

===
Implicit composition 2
===
g f+
---

(program
  (progn
    (implicit_composition
      (variable
        (identifier))
      (infix_projection
        (variable
          (identifier))
        (builtin_infix_func)))))

===
Implicit composition 3
===
f (+) g + :
---

(program
  (progn
    (implicit_composition
      (variable
        (identifier))
      (implicit_composition
        (parenthesis_exp
          (builtin_infix_func))
        (implicit_composition
          (variable
            (identifier))
          (builtin_infix_func)
          (assignment_func))))))

===
infix mod squared
===
f''
---

(program
  (progn
    (infix_mod_func
      (infix_mod_func
        (variable
          (identifier))
        (infix_func_modifier))
      (infix_func_modifier))))

===
infix mod with projection
===
a +://
---

(program
  (progn
    (infix_projection
      (variable
        (identifier))
      (infix_mod_func
        (infix_mod_func
          (assignment_func)
          (infix_func_modifier))
        (infix_func_modifier)))))

===
Complicated infix mod
===
a b'/'' b
---

(program
  (progn
    (func_app
      (variable
        (identifier))
      (infix_mod_func
        (infix_mod_func
          (infix_mod_func
            (infix_mod_func
              (variable
                (identifier))
              (infix_func_modifier))
            (infix_func_modifier))
          (infix_func_modifier))
        (infix_func_modifier))
      (variable
        (identifier)))))

===
dot infix
===
l . i, .[l;i]
---

(program
  (progn
    (func_app
      (variable
        (identifier))
      (builtin_infix_func)
      (func_app
        (variable
          (identifier))
        (builtin_infix_func)
        (func_app
          (builtin_infix_func)
          (parameter_pass
            (variable
              (identifier))
            (semicolon)
            (variable
              (identifier))))))))

===
comment and scan
===
1 f/ b
---

(program
  (progn
    (func_app
      (number)
      (infix_mod_func
        (variable
          (identifier))
        (infix_func_modifier))
      (variable
        (identifier)))))

===
comment and each right
===
1 f/: b
---

(program
  (progn
    (func_app
      (number)
      (infix_mod_func
        (variable
          (identifier))
        (infix_func_modifier))
      (variable
        (identifier)))))

===
infix as an element of a list
===
(';f)
---

(program
  (progn
    (list_definition
      (func_app
        (infix_func_modifier))
      (semicolon)
      (variable
        (identifier)))))

===
this is not a comment
===
(/;f)
---

(program
  (progn
    (list_definition
      (func_app
        (infix_func_modifier))
      (semicolon)
      (variable
        (identifier)))))
